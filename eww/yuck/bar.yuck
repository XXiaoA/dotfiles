;; Variables
(defpoll clock_time :interval "5m" "date +\%H")
(defpoll clock_minute :interval "5s" "date +\%M")
(defpoll clock_date :interval "10h" "date '+%Y/%m/%d'")
(defpoll volume_percent :interval "3s" "amixer -D pulse sget Master | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%'")
(defpoll memory :interval "15s" "scripts/memory")
(defpoll memory_used_mb :interval "2m" "scripts/mem-ad used")
(defpoll memory_total_mb :interval "2m" "scripts/mem-ad total")
(defpoll memory_free_mb :interval "2m" "scripts/mem-ad free")
(defvar vol_reveal false)
(defvar music_reveal false)
(defvar wifi_rev false)
(defvar time_rev false)
(deflisten workspace "scripts/workspaces")

(deflisten wifi_connected "scripts/wifi -m")
(deflisten wifi_speed "scripts/wifi -ns")
(defvar ssid "")

(defvar tray_icon '')

(defpoll song :interval "1s"  "scripts/music_info --song")
(defpoll song_status :interval "1s" "scripts/music_info --status")
(defpoll cover_art :interval "1s"  "scripts/music_info --cover")

(defpoll calendar_day :interval "20h" "date '+%d'")
(defpoll calendar_year :interval "20h" "date '+%Y'")

;; widgets
(defwidget wifi []
  (eventbox
        :onhover "eww update wifi_rev=true"
        :onhoverlost "eww update wifi_rev=false"
        :cursor "pointer"
        :tooltip wifi_speed
    (box :vexpand false :hexpand false :space-evenly false
     (button
         :class "${wifi_connected == "true" ? "wifi_icon" : "wifi_off_icon"}"
         :wrap false :limit-width 12 "${wifi_connected == "true" ? "" : ""}")
     (revealer :transition "slideright"
        :reveal wifi_rev
        :duration "350ms"
      (label :class "ssid_text"
         :text "${wifi_connected == "true" ? "${ssid}" : ""}"
         :orientation "h")))))

(defwidget powermenu_botton []
    (eventbox :cursor "pointer"
        (box :class "powermenu_botton" :vexpand: false :hexpand: false
          (button :onclick "eww open-many --toggle powermenu" ""))))

(defwidget workspaces []
    (literal :content workspace))

(defwidget mem []
    (box :class "mem_module" :vexpand false :hexpand false
      (circular-progress :value memory
          :class "membar"
          :thickness 4
       (button
           :class "iconmem"
           :limit-width 2
           :tooltip "using ${memory}% ram"
           :onclick "eww open-many --toggle system"
           :show_truncated false
           :wrap false
           ""))))

(defwidget sep []
  (box :class "module-2" :vexpand false :hexpand false
    (label :class "separ" :text "|")))

(defwidget clock_module []
  (eventbox :onhover "eww update time_rev=true"
        :onhoverlost "eww update time_rev=false"
        :cursor "pointer"
    (box :class "module" :space-evenly false :orientation "h" :spacing "3"
      (label :text clock_time :class "clock_time_class")
      (label :text "󰇙" :class "clock_time_sep")
      (label :text clock_minute :class "clock_minute_class")
     (revealer :transition "slideleft"
      :reveal time_rev
      :duration "350ms"
      (button :class "clock_date_class"
             :onclick "eww open-many --toggle calendar" clock_date)))))

(defwidget tray []
  (eventbox
    :cursor "pointer" :onclick "scripts/toggle_tray"
    (label
      :class "tray_icon"
      :text "${tray_icon}")))

(defwidget volume []
  (eventbox :onhover "eww update vol_reveal=true"
        :onhoverlost "eww update vol_reveal=false"
        :cursor "pointer"
   (box :space-evenly false :orientation "h" :spacing "3"
    (button :onclick "bspc rule -a Pavucontrol -o state=floating follow=on center=true && pavucontrol &" :class "volume_icon" "")
    (revealer :transition "slideleft"
       :reveal vol_reveal
       :duration "350ms"
     (scale :class "volbar"
        :value volume_percent
        :orientation "h"
        :tooltip "${volume_percent}%"
        :max 100
        :min 0
        :onchange "amixer -D pulse sset Master {}% && ~/dotfiles/scripts/volume_dunst")))))

  ;;  Music
(defwidget music []
  (eventbox :onhover "eww update music_reveal=true"
        :onhoverlost "eww update music_reveal=false"
        :cursor "pointer"
        :onclick "eww open-many --toggle player"
    (box :class "module-2" :orientation "h" :space-evenly false :vexpand false :hexpand false
     (box :class "song_cover_art" :vexpand false :hexpand false :style "background-image: url('${cover_art}');")
     (label :class "song" :wrap true :text song)
     (revealer :transition "slideright"
        :reveal music_reveal
        :duration "350ms"
      (box :vexpand false :hexpand false :oreintation "h"
                (button :class "song_btn_prev" :onclick "scripts/music_info --prev" "")
       (button :class "song_btn_play" :onclick "scripts/music_info --toggle" song_status)
       (button :class "song_btn_next" :onclick "scripts/music_info --next" ""))))))

(defwidget right []
  (box :orientation "h"
       :space-evenly false
       :halign "end"
   (tray)
   (sep)
   (volume)
   (wifi)
   (sep)
   (mem)
   (sep)
   (clock_module)))

(defwidget left []
  (box :orientation "h"
       :space-evenly false
       :halign "start"
   (powermenu_botton)
   (sep)
   (workspaces)))

(defwidget center []
  (box :orientation "h"
   :space-evenly false
      :halign "center"
   :class "center_modules"
   (music)))

(defwindow bar
    :geometry (geometry :x "0%"
                        :y "7px"
                        :width "98%"
                        :height "35px"
                        :anchor "top center")
    :stacking "fg"
    :windowtype "dock"
    (box :class "bar_class" :orientation "h"
     (left)
     (center)
     (right)))

(defwidget system []
  (box :class "sys_win" :orientation "v" :space-evenly false :hexpand false :vexpand false :spacing 0
   (box :class "sys_box" :orientation "h" :space-evenly false
       (box :orientation "v" :space-evenly false :spacing 0 :hexpand false :vexpand false))
   (label :text "" :class "sys_sep" :halign "center")
   (box :class "sys_mem_box" :orientation "h" :space-evenly false :halign "start"
       (circular-progress :value memory
                 :class "sys_mem"
                 :thickness 9
             (label :text ""
                 :class "sys_icon_mem"
                 :limit-width 2
                 :show_truncated false
                 :wrap false
                 :angle 0.0))
       (box :orientation "v" :space-evenly false :spacing 0 :hexpand false :vexpand false
        (label :text "memory"
            :halign "start"
            :class "sys_text_mem"
            :limit-width 9
            :show_truncated false
            :wrap false)
        (label :text "${memory_used_mb}|${memory_total_mb}mb "
            :halign "start"
            :class "sys_text_mem_sub"
            :limit-width 22
            :show_truncated false
            :wrap false)
        (label :text "${memory_free_mb}mb free"
            :halign "start"
            :class "sys_text_mem_sub"
            :limit-width 22
            :show_truncated false
            :wrap false)))))

(defwidget cal []
  (box :class "cal" :orientation "v"
   (box :class "cal-in"
    (calendar :class "cal"
       :day calendar_day
       :year calendar_year))))

(defwindow calendar
  :geometry (geometry :x "-20px"
             :y "7%"
             :anchor "top right"
             :width "270px"
             :height "60px")
 (cal))

(defwindow system
  :geometry (geometry :x "-20px"
             :y "7%"
             :anchor "top right"
             :width "290px"
             :height "120px")
  (system))
